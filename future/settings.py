"""
Django settings for future project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'test'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CSRF_WHITELIST = []                     #   with nginx CORS WHITE LIST, default csrf whitelist
CSRF_WHITELIST += ['127.0.0.1:8888', 'localhost:8800']
CSRF_WHITELIST += ['127.0.0.1:8080', 'localhost:8080']

ALLOWED_HOSTS_FOR_MYDANO = []


ALLOWED_HOSTS = []
ALLOWED_HOSTS += ['*', 'null']
ALLOWED_HOSTS += ['127.0.0.1', 'localhost']
ALLOWED_HOSTS += ['13.125.30.175']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'ckeditor',
    'ckeditor_uploader',
    'adminsortable',

    'ft_admin',
    'api',
    # 'rest_framework',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
#
# REST_FRAMWORK = {
#     'DEFAULT_PERMISSION_CLASSES': [
#         # 'rest_framework.permissions.IsAdminUser',
#     ],
#     'PAGE_SIZE': 10
# }

ROOT_URLCONF = 'future.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'future.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'USER' : 'root',
        'PASSWORD' : 'future',
        # 'HOST': '192.168.0.130',
        # 'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
         'mail_admins': {
             'level': 'ERROR',
             'class': 'django.utils.log.AdminEmailHandler',
             'filters': ['require_debug_false'],
         }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
}

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

# Static files (css, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

# BASE_URL = 'api.danoshop.net'
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    'mnt/static/',
]
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

# Media
MEDIA_ROOT = 'mnt/nas/images/'
MEDIA_URL = '/future/upload/'

#   django admin tools - Custom dashboard
ADMIN_TOOLS_INDEX_DASHBOARD = 'danoshop.dashboard.CustomIndexDashboard'
ADMIN_TOOLS_APP_INDEX_DASHBOARD = 'danoshop.dashboard.CustomAppIndexDashboard'

#   CK Editor
CKEDITOR_JQUERY_URL = 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'

def get_filename(filename):
    return filename.upper()

CKEDITOR_FILENAME_GENERATOR = 'utils.get_filename'
#CKEDITOR_UPLOAD_PATH = "/mnt/nas/shop/"
# CKEDITOR_UPLOAD_PATH = ''
CKEDITOR_UPLOAD_PATH = "upload/"
CKEDITOR_ALLOW_NONIMAGE_FILES = False
CKEDITOR_CONFIGS = {
    'default':{
        'skin': 'moono',
        'toolbar_custom': [
            {'name': 'paragraph',
             'items': ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', 'CreateDiv', '-',
                       'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl',
                       'Language']},
        ],
        'toolbar': 'toolbar_custom',
    }
}

USE_I18N = True
USE_L10N = True
USE_TZ = True